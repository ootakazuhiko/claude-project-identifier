#!/bin/bash

# Project Information Display Script
# This script displays project information when Claude Code starts or when called

# 色の定義
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# 太字
BOLD='\033[1m'

# プロジェクト設定を読み込む
load_project_config() {
    if [ -f ".claude-project" ]; then
        PROJECT_NAME=$(grep -o '"name": "[^"]*"' .claude-project | head -1 | cut -d'"' -f4)
        PROJECT_TYPE=$(grep -o '"type": "[^"]*"' .claude-project | head -1 | cut -d'"' -f4)
        PROJECT_VERSION=$(grep -o '"version": "[^"]*"' .claude-project | head -1 | cut -d'"' -f4)
        PROJECT_STATUS=$(grep -o '"status": "[^"]*"' .claude-project | head -1 | cut -d'"' -f4)
        PROJECT_DESC=$(grep -o '"description": "[^"]*"' .claude-project | head -1 | cut -d'"' -f4)
    else
        PROJECT_NAME="Unknown Project"
        PROJECT_TYPE="Unknown"
        PROJECT_VERSION="0.0.0"
        PROJECT_STATUS="Unknown"
        PROJECT_DESC="No description available"
    fi
}

# 待機インジケーターを表示
show_waiting_indicator() {
    indicators=(
        "[WAITING] 👁️  Ready for your command..."
        "[WAITING] 🤖 Awaiting instructions..."
        "[WAITING] 💭 What would you like to do?"
        "[WAITING] ⏳ Standing by..."
        "[WAITING] 🎯 Ready to assist..."
    )
    
    # ランダムに選択
    RANDOM_INDEX=$((RANDOM % ${#indicators[@]}))
    echo -e "${YELLOW}${indicators[$RANDOM_INDEX]}${NC}"
    echo ""
}

# プロジェクト情報の表示
show_project_info() {
    clear
    
    # 待機インジケーター
    show_waiting_indicator
    
    # バナー表示（Unicode対応チェック）
    if [ "${TERM}" != "" ] && command -v tput >/dev/null 2>&1; then
        # Unicode対応の場合
        echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}║${NC}${PURPLE}${BOLD}                    ${PROJECT_NAME}                    ${NC}${CYAN}║${NC}"
        echo -e "${CYAN}║${NC}${BLUE}              ${PROJECT_DESC}              ${NC}${CYAN}║${NC}"
        echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    else
        # ASCII文字のみ
        echo -e "${CYAN}============================================================${NC}"
        echo -e "${CYAN}|${NC}${PURPLE}${BOLD}                    ${PROJECT_NAME}                    ${NC}${CYAN}|${NC}"
        echo -e "${CYAN}|${NC}${BLUE}              ${PROJECT_DESC}              ${NC}${CYAN}|${NC}"
        echo -e "${CYAN}============================================================${NC}"
    fi
    echo ""
    
    # プロジェクト情報
    echo -e "${GREEN}▶ Project Information${NC}"
    echo "  ├─ Name: ${PROJECT_NAME}"
    echo "  ├─ Type: ${PROJECT_TYPE}"
    echo "  ├─ Version: ${PROJECT_VERSION}"
    echo "  ├─ Status: ${PROJECT_STATUS}"
    echo "  └─ Description: ${PROJECT_DESC}"
    echo ""
    
    # 環境情報
    echo -e "${GREEN}▶ Environment${NC}"
    echo "  ├─ Current Dir: $(pwd)"
    echo "  ├─ Time: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "  ├─ User: $(whoami)"
    echo "  ├─ Git Branch: $(git branch --show-current 2>/dev/null || echo 'Not a git repo')"
    
    # 最新コミット情報
    if command -v git >/dev/null 2>&1 && [ -d .git ]; then
        LAST_COMMIT=$(git log -1 --pretty=format:"%h - %s" 2>/dev/null || echo "No commits")
        echo "  ├─ Last Commit: ${LAST_COMMIT}"
    fi
    
    # 開発ツールのバージョン
    echo "  ├─ Node.js: $(node -v 2>/dev/null || echo 'Not installed')"
    echo "  ├─ npm: $(npm -v 2>/dev/null || echo 'Not installed')"
    echo "  ├─ Python: $(python3 --version 2>&1 | cut -d' ' -f2 || python --version 2>&1 | cut -d' ' -f2 || echo 'Not installed')"
    echo "  ├─ Docker: $(docker --version 2>/dev/null | cut -d' ' -f3 | cut -d',' -f1 || echo 'Not installed')"
    
    # TODOカウント（もし存在すれば）
    if command -v grep >/dev/null 2>&1; then
        TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.js" --include="*.ts" --include="*.py" --include="*.go" . 2>/dev/null | wc -l)
        if [ "$TODO_COUNT" -gt 0 ]; then
            echo "  └─ TODOs: ${TODO_COUNT} items"
        else
            echo "  └─ TODOs: None"
        fi
    else
        echo "  └─ TODOs: Unable to count"
    fi
    echo ""
    
    # 技術スタック（.claude-projectから読み込み）
    if [ -f ".claude-project" ]; then
        echo -e "${GREEN}▶ Tech Stack${NC}"
        # ここでJSONから技術スタックを抽出（簡易版）
        echo "  └─ See .claude-project for details"
        echo ""
    fi
    
    # クイックコマンド
    echo -e "${GREEN}▶ Quick Commands${NC}"
    
    # Makefileが存在する場合
    if [ -f "Makefile" ] || [ -f "makefile" ]; then
        echo "  ├─ make help    - Show available commands"
        echo "  ├─ make info    - Show this information"
    fi
    
    # package.jsonが存在する場合
    if [ -f "package.json" ]; then
        echo "  ├─ npm start    - Start development"
        echo "  ├─ npm test     - Run tests"
        echo "  ├─ npm run build - Build project"
    fi
    
    # requirements.txtが存在する場合
    if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
        echo "  ├─ pip install -r requirements.txt - Install dependencies"
    fi
    
    echo "  └─ [Type your command to begin]"
    echo ""
    
    # セパレーター
    echo -e "${YELLOW}──────────────────────────────────────────────────────────${NC}"
    echo -e "${CYAN}Ready to start working on ${PROJECT_NAME}!${NC}"
    echo -e "${WHITE}Type your command or question to begin...${NC}"
    echo ""
}

# プロンプトを設定する関数
setup_prompt() {
    # プロジェクト設定を読み込む
    load_project_config
    
    # プロンプトをカスタマイズ（bashとzshの両方に対応）
    if [ -n "$BASH_VERSION" ]; then
        # Bash用のプロンプト
        export PS1="\[\033[0;36m\][${PROJECT_NAME}]\[\033[0m\] \w $ "
    elif [ -n "$ZSH_VERSION" ]; then
        # Zsh用のプロンプト
        export PROMPT="%F{cyan}[${PROJECT_NAME}]%f %~ $ "
    fi
    
    # 環境変数を設定
    export CLAUDE_PROJECT_NAME="${PROJECT_NAME}"
    export CLAUDE_PROJECT_TYPE="${PROJECT_TYPE}"
    export CLAUDE_PROJECT_VERSION="${PROJECT_VERSION}"
}

# メイン処理
main() {
    # プロジェクト設定を読み込む
    load_project_config
    
    # コマンドライン引数をチェック
    case "${1:-}" in
        "--prompt")
            # プロンプト設定のみ（静かに実行）
            setup_prompt
            ;;
        "--info")
            # 情報表示のみ
            show_project_info
            ;;
        *)
            # デフォルト：情報表示とプロンプト設定
            show_project_info
            setup_prompt
            ;;
    esac
}

# プロジェクトルートの確認
if [ -f "CLAUDE.md" ] || [ -f ".claude-project" ]; then
    main
else
    echo -e "${RED}Error: Not in a Claude-enabled project directory${NC}"
    echo "Please ensure you have CLAUDE.md and .claude-project files in your project root."
    exit 1
fi